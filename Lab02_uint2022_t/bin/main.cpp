
#include <lib/number.h>
#include <iostream>

int main() {
    uint2022_t v1, v2;
    v1 = from_uint(2398);
    v2 = from_string("239");
    std::cout << (v1==v2) << std::endl;

    //std::cout << (v1==v2 ? "CORRECT" : "Error");
    return 0;
}

/*
    uint2022_t value;
    value = from_string(
            "481560916771158684800786922703235625631274322714142263414417884163925873322306437689024231009526751394401758326916367106052034484602375642882110959089521812209947069992139877256008949136579813164413834190131240610432508865633901300457687591589632190325582710683886781973951695733384278544896131740867054246692573031629150247882082682647773168904426336814855367810693467547461780797071163567159452928068892906992787178135839959347223507647240845924670958716173279750751341651541295792537288393481542519773223140547524361834615428274169543954961376881442030303829940191406452725012875774576546969913778507874303");
    //std::cout << value << std::endl;

    uint32_t a = 10;
    uint2022_t number = from_string("654654654");
    uint2022_t number2 = from_uint(a);


    srand(time(nullptr));
    uint32_t a1 = (rand() % 30000) * (rand() % 30000) * (rand() % 30000) * (rand() % 30000) * (rand() % 30000);
    uint32_t a2 = a1 + (rand() % 30000) * (rand() % 30000);
    uint64_t result = (uint64_t)a2 / a1;

    uint2022_t v1 = from_uint(a1);
    uint2022_t v2 = from_uint(a2);
    uint2022_t correct_result = from_uint(result);

    std::cout << ((correct_result == (v2 / v1)) ? "OKAY" : "ERROR!");
    std::cout << "\n";
    std::cout << v2 << std::endl;
    std::cout << v1 << std::endl;
    std::cout << v2 / v1 << std::endl;
    std::cout << correct_result << std::endl;


//uint2022_t d1 = from_string("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999481560916771158684800786922703235625631274322714142263414417884163925873322306437689024231009526751394401758326916367106052034484602375642882110959089521812209947069992139877256008949136579813164413834190131240610432508865633901300457687591589632190325582710683886781973951695733384278544896131740867054246692573031629150247882082682647773168904426336814855367810693467547461780797071163567159452928068892906992787178135839959347223507647240845924670958716173279750751341651541295792537288393481542519773223140547524361834615428274169543954961376881442030303829940191406452725012875774576546969913778507874303");

//uint2022_t d2 = from_string("815609167711586848022714142263414417884163925873322306437689024231009526751394401758326916367106052034484602375642882110959089521812209947069992139877256008949136579813164413834190131240610432508865633901300457687591589632190325582710683886781973951695733384278544896131740867054246692573031629150247882082682647773168904426336814855367810693467547461780797071163567159452928068892906992787178135839959347223507647240845924670958716173279750751341651541295792537288393481542519773223140547524361834615428274169543954961376881442030303829940191406452725012875774576546969913778507874303");

//std::cout << d1/d2;
*/